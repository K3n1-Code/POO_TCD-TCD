/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.edu.ifnmg.gui;

import br.edu.ifnmg.book.Book;
import br.edu.ifnmg.book.BookDao;
import br.edu.ifnmg.commets.Comments;
import br.edu.ifnmg.commets.CommentsDao;
import br.edu.ifnmg.credential.Credential;
import br.edu.ifnmg.reader.Reader;
import br.edu.ifnmg.reader.ReaderDao;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author ketsu
 */
public class Comentario extends javax.swing.JInternalFrame {

    /**
     * Creates new form ComentariosLivro
     */
    private static Comentario instance;
    public static Credential cred = null;
//    private Long selectedCommentId;

    public Comentario() {
        initComponents();
        // Centralização da janela
        //setLocationRelativeTo(null);
        lblcomentado.setVisible(false);
        lblSelecione.setVisible(false);
        lblSoLeitores.setVisible(false);
        comentariosBookTable();
        ocultarColunaId();
    }

    public static Comentario getInstance() {
        if (instance == null) {
            instance = new Comentario();
        }
        TelaPrincipal.getInstance(TelaPrincipal.current_cred).jDesktop.add(instance);
        return instance;
    }
    
    private void ocultarColunaId() {
        int columnIndex = 0;
        TableColumn colunaId = tableComentarios.getColumnModel().getColumn(columnIndex);
        colunaId.setMinWidth(0);
        colunaId.setMaxWidth(0);
        colunaId.setPreferredWidth(0);
        colunaId.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        btnComentar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtComentario = new javax.swing.JTextArea();
        lblSoLeitores = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableComentarios = new javax.swing.JTable();
        lblTdsLivros = new javax.swing.JLabel();
        lblSelecione = new javax.swing.JLabel();
        lblcomentado = new javax.swing.JLabel();

        setClosable(true);

        lblTitulo.setText("Comentários:");

        btnComentar.setText("Comentar");
        btnComentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComentarActionPerformed(evt);
            }
        });

        txtComentario.setColumns(20);
        txtComentario.setRows(5);
        jScrollPane2.setViewportView(txtComentario);

        lblSoLeitores.setForeground(new java.awt.Color(240, 0, 0));
        lblSoLeitores.setText("Comentários Apenas Para Leitores!!");

        tableComentarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Titulo", "Autor", "Páginas", "Ano", "Edição"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableComentarios);

        lblTdsLivros.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lblTdsLivros.setText("Livros Cadrastrados");

        lblSelecione.setForeground(new java.awt.Color(240, 0, 0));
        lblSelecione.setText("Selecione um Livro");

        lblcomentado.setForeground(new java.awt.Color(0, 0, 255));
        lblcomentado.setText("Livro Comentado Com Sucesso!!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(lblTdsLivros, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(btnComentar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTitulo)
                                        .addGap(210, 210, 210)))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblSelecione)
                                .addGap(109, 109, 109))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblSoLeitores)
                                .addGap(49, 49, 49))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(lblcomentado, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTdsLivros)
                            .addComponent(lblSelecione))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(lblTitulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(lblSoLeitores)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblcomentado)
                        .addGap(18, 18, 18)
                        .addComponent(btnComentar)))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnComentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComentarActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableComentarios.getSelectedRow();
        if (selectedRow != -1) {
            //            comentariosBook(selectedCommentId);
            Long selectedId = (Long) tableComentarios.getValueAt(selectedRow, 0);
            comentariosBook(selectedId);
            txtComentario.setText("");
            lblSelecione.setVisible(false);
            comentariosBookTable();
        } else {
            System.out.println("Selecione um livro antes de adicionar um comentário.");
            lblSelecione.setVisible(true);
            lblcomentado.setVisible(false);
        }
    }//GEN-LAST:event_btnComentarActionPerformed

    private void comentariosBookTable() {
        try {
            BookDao bookDao = new BookDao();
            List<Book> books = bookDao.findAll();

            DefaultTableModel model = (DefaultTableModel) tableComentarios.getModel();
            model.setRowCount(0);

            for (Book book : books) {
                Object[] rowData = {
                    book.getId(),
                    book.getTitle(),
                    book.getAuthors(),
                    book.getPages(),
                    book.getYear(),
                    book.getEdition(),};
                model.addRow(rowData);

                // Adiciona um listener para a tabela
                tableComentarios.getSelectionModel().addListSelectionListener(e -> {
                    int selectedRow = tableComentarios.getSelectedRow();
                    if (selectedRow != -1) {
                        // Obtém os dados da linha selecionada, incluindo o ID
//                        selectedCommentId = book.getId();

                        lblSelecione.setVisible(false);
                        lblcomentado.setVisible(false);
                        lblSoLeitores.setVisible(false);
                    }
                });
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void comentariosBook(Long selectedId) {
        try {
            if (selectedId != null) {
                String comentario = txtComentario.getText();

                BookDao bookDao = new BookDao();
                Book livro = bookDao.findById(selectedId);

                if (livro != null) {
                    // Adiciona um comentário ao livro
                    CommentsDao commentsDao = new CommentsDao();

                    Long readerId = cred.getUser().getId();
                    ReaderDao readerDao = new ReaderDao();
                    Reader reader = readerDao.findById(readerId);

                    if (reader != null) {
                        Comments comment = new Comments(null, comentario, livro, reader);
                        commentsDao.saveOrUpdate(comment);
                        System.out.println("Comentário adicionado com sucesso!");
                        lblcomentado.setVisible(true);
                    } else {
                        System.out.println("Leitor não encontrado");
                        lblSoLeitores.setVisible(true);
                    }
                } else {
                    System.out.println("Livro não encontrado para adicionar comentário");
                }
            } else {
                System.out.println("Selecione um livro antes de adicionar um comentário");
                lblSelecione.setVisible(true);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Comentario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Comentario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Comentario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Comentario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
      
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Comentario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComentar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblSelecione;
    private javax.swing.JLabel lblSoLeitores;
    private javax.swing.JLabel lblTdsLivros;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblcomentado;
    private javax.swing.JTable tableComentarios;
    private javax.swing.JTextArea txtComentario;
    // End of variables declaration//GEN-END:variables
}
